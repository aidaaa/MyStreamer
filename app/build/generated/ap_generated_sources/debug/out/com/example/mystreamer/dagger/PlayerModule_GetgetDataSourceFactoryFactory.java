// Generated by Dagger (https://google.github.io/dagger).
package com.example.mystreamer.dagger;

import android.content.Context;
import com.google.android.exoplayer2.upstream.DataSource;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class PlayerModule_GetgetDataSourceFactoryFactory
    implements Factory<DataSource.Factory> {
  private final PlayerModule module;

  private final Provider<Context> contextProvider;

  public PlayerModule_GetgetDataSourceFactoryFactory(
      PlayerModule module, Provider<Context> contextProvider) {
    this.module = module;
    this.contextProvider = contextProvider;
  }

  @Override
  public DataSource.Factory get() {
    return provideInstance(module, contextProvider);
  }

  public static DataSource.Factory provideInstance(
      PlayerModule module, Provider<Context> contextProvider) {
    return proxyGetgetDataSourceFactory(module, contextProvider.get());
  }

  public static PlayerModule_GetgetDataSourceFactoryFactory create(
      PlayerModule module, Provider<Context> contextProvider) {
    return new PlayerModule_GetgetDataSourceFactoryFactory(module, contextProvider);
  }

  public static DataSource.Factory proxyGetgetDataSourceFactory(
      PlayerModule instance, Context context) {
    return Preconditions.checkNotNull(
        instance.getgetDataSourceFactory(context),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
