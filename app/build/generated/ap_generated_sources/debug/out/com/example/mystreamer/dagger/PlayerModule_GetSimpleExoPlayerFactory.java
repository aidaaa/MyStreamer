// Generated by Dagger (https://google.github.io/dagger).
package com.example.mystreamer.dagger;

import com.google.android.exoplayer2.SimpleExoPlayer;
import com.google.android.exoplayer2.trackselection.DefaultTrackSelector;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class PlayerModule_GetSimpleExoPlayerFactory implements Factory<SimpleExoPlayer> {
  private final PlayerModule module;

  private final Provider<ContextClass> contextClassProvider;

  private final Provider<DefaultTrackSelector> trackSelectorProvider;

  public PlayerModule_GetSimpleExoPlayerFactory(
      PlayerModule module,
      Provider<ContextClass> contextClassProvider,
      Provider<DefaultTrackSelector> trackSelectorProvider) {
    this.module = module;
    this.contextClassProvider = contextClassProvider;
    this.trackSelectorProvider = trackSelectorProvider;
  }

  @Override
  public SimpleExoPlayer get() {
    return provideInstance(module, contextClassProvider, trackSelectorProvider);
  }

  public static SimpleExoPlayer provideInstance(
      PlayerModule module,
      Provider<ContextClass> contextClassProvider,
      Provider<DefaultTrackSelector> trackSelectorProvider) {
    return proxyGetSimpleExoPlayer(module, contextClassProvider.get(), trackSelectorProvider.get());
  }

  public static PlayerModule_GetSimpleExoPlayerFactory create(
      PlayerModule module,
      Provider<ContextClass> contextClassProvider,
      Provider<DefaultTrackSelector> trackSelectorProvider) {
    return new PlayerModule_GetSimpleExoPlayerFactory(
        module, contextClassProvider, trackSelectorProvider);
  }

  public static SimpleExoPlayer proxyGetSimpleExoPlayer(
      PlayerModule instance, ContextClass contextClass, DefaultTrackSelector trackSelector) {
    return Preconditions.checkNotNull(
        instance.getSimpleExoPlayer(contextClass, trackSelector),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
