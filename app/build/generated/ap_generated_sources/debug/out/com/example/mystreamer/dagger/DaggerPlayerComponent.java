// Generated by Dagger (https://google.github.io/dagger).
package com.example.mystreamer.dagger;

import com.example.mystreamer.MainActivity;
import com.example.mystreamer.MainActivity_MembersInjector;
import com.google.android.exoplayer2.upstream.DataSource;
import dagger.internal.Preconditions;

public final class DaggerPlayerComponent implements PlayerComponent {
  private PlayerModule playerModule;

  private AndroidModule androidModule;

  private DaggerPlayerComponent(Builder builder) {
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  private DataSource.Factory getFactory() {
    return PlayerModule_GetgetDataSourceFactoryFactory.proxyGetgetDataSourceFactory(
        playerModule, AndroidModule_GetContextFactory.proxyGetContext(androidModule));
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {
    this.playerModule = builder.playerModule;
    this.androidModule = builder.androidModule;
  }

  @Override
  public void getPlayer(MainActivity mainActivity) {
    injectMainActivity(mainActivity);
  }

  private MainActivity injectMainActivity(MainActivity instance) {
    MainActivity_MembersInjector.injectTrackSelector(
        instance,
        PlayerModule_GetDefaultTrackSelectorFactory.proxyGetDefaultTrackSelector(playerModule));
    MainActivity_MembersInjector.injectDaFactory(instance, getFactory());
    return instance;
  }

  public static final class Builder {
    private PlayerModule playerModule;

    private AndroidModule androidModule;

    private Builder() {}

    public PlayerComponent build() {
      if (playerModule == null) {
        this.playerModule = new PlayerModule();
      }
      if (androidModule == null) {
        throw new IllegalStateException(AndroidModule.class.getCanonicalName() + " must be set");
      }
      return new DaggerPlayerComponent(this);
    }

    public Builder androidModule(AndroidModule androidModule) {
      this.androidModule = Preconditions.checkNotNull(androidModule);
      return this;
    }

    public Builder playerModule(PlayerModule playerModule) {
      this.playerModule = Preconditions.checkNotNull(playerModule);
      return this;
    }
  }
}
