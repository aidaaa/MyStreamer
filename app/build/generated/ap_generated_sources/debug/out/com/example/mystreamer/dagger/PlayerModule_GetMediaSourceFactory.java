// Generated by Dagger (https://google.github.io/dagger).
package com.example.mystreamer.dagger;

import android.net.Uri;
import com.google.android.exoplayer2.source.MediaSource;
import com.google.android.exoplayer2.upstream.DataSource;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class PlayerModule_GetMediaSourceFactory implements Factory<MediaSource> {
  private final PlayerModule module;

  private final Provider<DataSource.Factory> dFactoryProvider;

  private final Provider<Uri> uriProvider;

  public PlayerModule_GetMediaSourceFactory(
      PlayerModule module,
      Provider<DataSource.Factory> dFactoryProvider,
      Provider<Uri> uriProvider) {
    this.module = module;
    this.dFactoryProvider = dFactoryProvider;
    this.uriProvider = uriProvider;
  }

  @Override
  public MediaSource get() {
    return provideInstance(module, dFactoryProvider, uriProvider);
  }

  public static MediaSource provideInstance(
      PlayerModule module,
      Provider<DataSource.Factory> dFactoryProvider,
      Provider<Uri> uriProvider) {
    return proxyGetMediaSource(module, dFactoryProvider.get(), uriProvider.get());
  }

  public static PlayerModule_GetMediaSourceFactory create(
      PlayerModule module,
      Provider<DataSource.Factory> dFactoryProvider,
      Provider<Uri> uriProvider) {
    return new PlayerModule_GetMediaSourceFactory(module, dFactoryProvider, uriProvider);
  }

  public static MediaSource proxyGetMediaSource(
      PlayerModule instance, DataSource.Factory dFactory, Uri uri) {
    return Preconditions.checkNotNull(
        instance.getMediaSource(dFactory, uri),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
